name: 'Github Actions Job info'
description: |
  Obtains job metadata from the GitHub Actions API.
  Provides one of two files on disk:
  - job_info.json: metadata for the job that is calling this script. Jobs use this to know their
    unique ID, which is used to associate attribute metadata with job timing information.
  - all_jobs.json: metadata for all jobs under the top-level workflow. This is used by the
    final job, which parses this file, associates the span information with attribute metadata,
    and sends the spans to the OpenTelemetry receiver endpoint.

inputs:
  all_jobs:
    description: |
      When true, saves a JSON file with all jobs. Otherwise, saves a JSON file
      from only the current job.
    default: "false"

runs:
  using: 'composite'
  steps:
    - uses: actions/github-script@v7
      id: get-job-info
      env:
        ALL_JOBS: "${{ inputs.all_jobs }}"
      with:
        retries: 3
        script: |
          const fs = require('node:fs')
          const runAttempt = parseInt(process.env.GITHUB_RUN_ATTEMPT, 10)

          get_job = async ({github, context, process}) => {
            const opts = github.rest.actions.listJobsForWorkflowRunAttempt.endpoint.merge(
                {
                    attempt_number: runAttempt,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: context.runId,
                    per_page: 100
                });
            const jobs = await github.paginate(opts);
            return jobs;
          };

          var jobs = undefined;
          var retryCount = 0;
          maxRetries = 5;
          initialDelay = 2000;
          while (jobs === undefined) {
            jobs = await get_job({github, context, process});
            if (jobs === undefined && retryCount < maxRetries) {
              retryCount++;
              await new Promise(res => setTimeout(res, initialDelay * Math.pow(2, retryCount - 1)));
            } else {
              break;
            }
          }

          if (process.env.ALL_JOBS === 'true') {
            try {
              fs.writeFileSync('all_jobs.json', JSON.stringify(jobs));
            } catch(err) {
              console.error(err)
              throw(err)
            }
          } else {
            // We know what the run ID is, but we don't know which specific job we're being run from.
            // https://github.com/orgs/community/discussions/8945
            const this_job = jobs.find((job) => {
                return job.runner_name === process.env.RUNNER_NAME && job.run_attempt === runAttempt;
            });


            if (this_job === undefined){
              throw "Could not identify current job in workflow. Please see debug logs for more info."
            }
            try {
              fs.writeFileSync('job_info.json', JSON.stringify(this_job));
            } catch(err) {
              console.error(err)
              throw(err)
            }
          }
