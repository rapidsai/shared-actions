name: 'Github Actions Job info'
description: 'Outputs a trace identifier computed from the GitHub runtime environment. Requires the gha-tools repo to be on PATH.'
outputs:
  job-info:
    description: 'A JSON blob that contains job metadata, including name, start/stop time, and steps info. This is seemingly the only programmatic access to the job name.'
    value: ${{ toJSON(steps.get-job-info.outputs.job_info_json) }}

runs:
  using: 'composite'
  steps:
    - uses: actions/github-script@v7
      id: get-job-info
      with:
        retries: 3
        script: |
          const fs = require('node:fs')
          const runAttempt = parseInt(process.env.GITHUB_RUN_ATTEMPT, 10)

          get_job = async ({github, context, process}) => {
            const opts = github.rest.actions.listJobsForWorkflowRunAttempt.endpoint.merge(
                {
                    attempt_number: runAttempt,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: context.runId,
                    per_page: 100
                });
            const jobs = await github.paginate(opts);
            // We know what the run ID is, but we don't know which specific job we're being run from.
            // https://github.com/orgs/community/discussions/8945
            return jobs.find((job) => {
                return job.runner_name === process.env.RUNNER_NAME && job.run_attempt === runAttempt;
            });
          };

          var this_job = undefined;
          var retryCount = 0;
          maxRetries = 5;
          initialDelay = 2000;
          while (this_job === undefined) {
            this_job = await get_job({github, context, process});
            if (this_job === undefined && retryCount < maxRetries) {
              retryCount++;
              await new Promise(res => setTimeout(res, initialDelay * Math.pow(2, retryCount - 1)));
            } else {
              break;
            }
          }

          if (this_job === undefined){
            github.log.error("Telemetry values were not available. Please see debug logs for more info.");
            github.log.error("All jobs:");
            const jobs = await get_job({github, context, process});
            github.log.error(JSON.stringify(jobs));

            throw "Telemetry values were not available. Please see debug logs for more info."
          }
          core.setOutput("job_info_json", this_job);
          try {
            fs.writeFileSync('job_info.json', JSON.stringify(this_job));
          } catch(err) {
           console.error(err)
           throw(err)
          }
